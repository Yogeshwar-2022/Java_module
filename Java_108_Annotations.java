@FunctionalInterface
/* --> An interface which contains only one abstract method is known as functional interface.
If interface is not functional an error is thrown */

interface SendMessage{
    void message(String s);
}

class AndroidPhone implements SendMessage{
    @Override
    // --> This annotation makes sure that the subclass method is successfully overriding the parent class method.

    public void message(String s){
        System.out.println(s + " -sent");
    }

    @Deprecated
    // --> This annotation is used to mark a deprecated method. A warning is generated by compiler when the method is used.

    void snakeGame() {
        System.out.println("Playing Snake Game");
    }
}

public class Java_108_Annotations {
    @SuppressWarnings("deprecation")
    // --> This annotation helps us to suppress some warnings that are being generated by compiler.

    public static void main(String[] args) {
        AndroidPhone Samsung = new AndroidPhone();
        Samsung.message("Hello");
        Samsung.snakeGame();
    }
}
